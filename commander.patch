--- Firmware/src/modules/commander/commander.cpp	2015-04-07 12:50:25.882575936 +0530
+++ pandapilot_v4/src/modules/commander/commander.cpp	2015-04-07 16:23:25.574006163 +0530
@@ -2148,6 +2148,28 @@
 
 #endif
 
+#ifdef CONFIG_ARCH_BOARD_NAVSTIK_V1
+
+	/* this runs at around 20Hz, full cycle is 16 ticks = 10/16Hz */
+	if (actuator_armed->armed) {
+		/* armed, solid */
+		led_on(LED_BLUE);
+
+	} else if (actuator_armed->ready_to_arm) {
+		/* ready to arm, blink at 1Hz */
+		if (leds_counter % 20 == 0) {
+			led_toggle(LED_BLUE);
+		}
+
+	} else {
+		/* not ready to arm, blink at 10Hz */
+		if (leds_counter % 2 == 0) {
+			led_toggle(LED_BLUE);
+		}
+	}
+
+#endif
+
 	/* give system warnings on error LED, XXX maybe add memory usage warning too */
 	if (status_local->load > 0.95f) {
 		if (leds_counter % 2 == 0) {
--- Firmware/src/modules/commander/commander_helper.cpp	2015-04-07 12:50:25.882575936 +0530
+++ pandapilot_v4/src/modules/commander/commander_helper.cpp	2015-04-07 14:59:15.106231334 +0530
@@ -1,5 +1,5 @@
 /****************************************************************************
- *
+ *   Copyright (c) 2014 NavStik Development Team. All rights reserved.
  *   Copyright (c) 2013, 2014 PX4 Development Team. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -89,6 +89,8 @@
 static hrt_abstime tune_end = 0;		// end time of currently played tune, 0 for repeating tunes or silence
 static int tune_current = TONE_STOP_TUNE;		// currently playing tune, can be interrupted after tune_end
 static unsigned int tune_durations[TONE_NUMBER_OF_TUNES];
+static bool print_easy_board_detection= true;
+static bool print_pro_board_detection = true; /**Board Detection Warning**/
 
 static param_t bat_v_empty_h;
 static param_t bat_v_full_h;
@@ -350,6 +352,25 @@
 		ret = remaining_voltage;
 	}
 
+	if(voltage < 5.5f)
+	{
+		if (print_easy_board_detection)
+		{
+		warnx("\nEasy Board Detected");
+		warnx("\nSetting Battery Health to 0.8");
+		print_easy_board_detection=false;
+		}
+		ret=0.8;
+	}
+	else
+	{
+		if(print_pro_board_detection)
+		{
+		warnx("\nPro Board Detected");
+		print_pro_board_detection=false;
+		}
+	}
+
 	/* limit to sane values */
 	ret = (ret < 0.0f) ? 0.0f : ret;
 	ret = (ret > 1.0f) ? 1.0f : ret;
